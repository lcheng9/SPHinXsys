#include <fstream>
#include <cstdio>

#include "TransferUNV2411DS.h"
#include "TransferUNVTools.h"

using namespace std;
using namespace unvMesh;
using namespace unvMesh2411;

static string _label_dataset = "2411";

unvMesh2411::UNVRecordData::UNVRecordData():
  exp_coord_sys_num(1),
  disp_coord_sys_num(1),
  color(11)//(0) -  0019936: EDF 794 WMESH : Export UNV : Node color and group id
{
  coord[1] = coord[2] = 0.0; // prepare to e.g. 2D mesh
}

void unvMesh2411::read_stream(std::ifstream& in_stream, TDataSet& theDataSet)
{
  if(!in_stream.good())
    EXCEPTION(runtime_error,"Error: bad input UNV file.");

  /*
   * adjust the \p istream to our
   * position
   */
  if(!beginning_of_dataset(in_stream,_label_dataset))
    EXCEPTION(runtime_error,"-=*Error: cannot find "<<_label_dataset<<" dataset!");

  /**
   * always 3 coordinates in the UNV file, no matter
   * which dimensionality libMesh is in
   */
  int dim = 3;
  std::string num_buf;

  // Issue 22638. Find out space dimension to read a 2D mesh from a file
  // generated by SIMAIL from Simulog
  if ( !in_stream.eof() )
  {
    int where  = in_stream.tellg();

    UNVRecordData aRec;
    in_stream >> aRec.label ;
    if ( aRec.label == -1 ) return; // dataset end 

    dim = 0;
    num_buf = read_line( in_stream );
    for ( size_t i = 0; i < num_buf.size(); )
    {
      // skip spaces
      while ( i < num_buf.size() && num_buf[i] == ' ' )
        ++i;

      dim += ( i < num_buf.size() );

      // skip non-spaces
      while ( i < num_buf.size() && num_buf[i] != ' ' )
        ++i;
    }
    if ( dim == 0 )
      return;

    in_stream.seekg( where, in_stream.beg );
  }

  // read the rest records
  while ( !in_stream.eof() )
  {
    UNVRecordData aRec;
    in_stream >> aRec.label ;
    if ( aRec.label == -1 ) {
      // end of dataset is reached
      break;
    }

    in_stream>>aRec.exp_coord_sys_num;
    in_stream>>aRec.disp_coord_sys_num;
    in_stream>>aRec.color;

    /*
     * take care of the
     * floating-point data
     */
    for(int d = 0; d < dim; d++){
      in_stream>>num_buf;
      aRec.coord[d] = D_to_e(num_buf);
    }

    theDataSet.push_back(aRec);
  }
}


void unvMesh2411::write_stream(std::ofstream& out_stream, const TDataSet& theDataSet)
{
  if(!out_stream.good())
    EXCEPTION(runtime_error,"Error: bad UNV output file for node data.");
  
  /*
   * Write beginning of dataset
   */
  out_stream<<"    -1\n";
  out_stream<<"  "<<_label_dataset<<"\n";

  TDataSet::const_iterator anIter = theDataSet.begin();
  for(; anIter != theDataSet.end(); anIter++)
  {
    const UNVRecordData& aRec = *anIter;
    char buf[78];
    sprintf(buf, "%10d%10d%10d%10d\n", 
            aRec.label,
            aRec.exp_coord_sys_num,
            aRec.disp_coord_sys_num,
            aRec.color);
    out_stream<<buf;

    // the coordinates
    sprintf(buf, "%25.16E%25.16E%25.16E\n", 
            aRec.coord[0],
            aRec.coord[1],
            aRec.coord[2]);
    out_stream<<buf;
  }
  
  
  /*
   * Write end of dataset
   */
  out_stream<<"    -1\n";
}

void unvMesh2411::write_stream(std::ostream& out_stream, const TDataSet& theDataSet)
{
    if (!out_stream.good())
        EXCEPTION(runtime_error, "Error: bad UNV output file for node data.");

    /*
    * Write beginning of dataset
    */
    out_stream << "    -1\n";
    out_stream << "  " << _label_dataset << "\n";

    TDataSet::const_iterator anIter = theDataSet.begin();
    for (; anIter != theDataSet.end(); anIter++)
    {
        const UNVRecordData& aRec = *anIter;
        char buf[78];
        sprintf(buf, "%10d%10d%10d%10d\n",
            aRec.label,
            aRec.exp_coord_sys_num,
            aRec.disp_coord_sys_num,
            aRec.color);
        out_stream << buf;

        // the coordinates
        sprintf(buf, "%25.16E%25.16E%25.16E\n",
            aRec.coord[0],
            aRec.coord[1],
            aRec.coord[2]);
        out_stream << buf;
    }


    /*
    * Write end of dataset
    */
    out_stream << "    -1\n";
}